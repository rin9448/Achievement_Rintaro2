【初期インストール物】
teams
xcode
homebrew
docker
git

【やること】
githubアカウント作成
slack招待・アカウント作成
redmine招待


【クックパッドの資料と、インターン資料】
・何の理解ができたかヒアリング
・最低限は上記二つ
・自分の中でindexを作って欲しい（xmind）

・分からなかったところはどこなのか


【全体感の説明】
*目的
→どの案件に入っても活躍できる人材になるための最短コース２ヶ月
*覚える粒度
→書いてある内容について使用しているツールや技術って何なの？と聞かれた時に答えられるレベル。
*エンジニアとして必要なこと
→とにかく手を動かす
→ググる。ググってもわからなければ聞く

具体的な話は自分で調べましょう
GIT…ソースコード管理の仕組み。MCSの
docker…コンテナ技術

モデリング
モデルとは…設計自体のモデル、物理モデル。概念モデルを作ろうとしている。
　　　　　　例）絵を描くときのモデル、車のモデル
UMLモデリング…概念と概念の関係性を表せる。クラス図を作れる。そのままデータベースに落とし込めるもの。

ここまでで作ったDocker環境でrailsを行う。
個人個人のリポジトリを作って開発を行う。
タスク管理ツールのモデリングをしたものをそのまま書き起こす。
railsのアクティブレコードを使用して実装しつつ、単体テストを行っていく。


Apolloフロントエンドの時にやってしまうかも。

これさえ終わってしまえば、だいたいどこの現場でも使えるようになる。

ここまでで20万〜30万かかる。

モデリングとアクティブレコード

【モデリングについて】
UML・・・動的な図と静的な図で表せられる
正規化・・・データベースの正規化。第一正規系〜第六正規系がある。

リソースは赤色
イベントは黄色

一対多、多対多

hasmany　projede

中間テーブルの作り方

普通にSSHで入ってコマンド実行でbashで入る。

annotate

validationの書き方
テストに応じた設定が、
1週間後には書かれている状態


1オブジェクト=1

DOAの時代に

リソース(物)とイベント(事)
RDBが実装された時に言われていること。
マスターの考え方に近いのがリソース
トランザクションの考え方に近いのがイベント

クラスの定義をクラス。さらにクラス定義のオブジェクト定義


【宮島さんとの話】
カバレッジ
ruby カバレッジ

技術力
　どこが得意
　進みたい方向性
問題解決力
リーダーシップ
コミュニケーション

全体の開発のプロセス
　UI設計
　画面設計
　モデル設計

　GraphQLのスキーマ定義
　　type定義


中間テーブルとは
　リソースとリソースの間のイベントを実現するのが中間テーブル

【今までの取り組み】
9月研修組
　3名。中に社内全体とコミュニケーションを取り、研修内容やチーム状況を
　正確に確認できる人物がいた。
☆10月研修組
　8名内2名経験者(1名キャッチアップ早く、社内教育もされていた方で、メンバーに多く教えていた)
　→ここでのデータは新卒研修に活かせそう。
　　→モブプロ
11月研修組
　2名内1名経験者
　→ここでのデータは中途入社の方に使えそう


・コードの成果物をどう見るか
　→手本のソースを作成し、それを展開して修正してもらう。
　→各グループでメンターを付けてコードレビューを実施する。
・1ヶ月でRedmineの内容を全て理解して使用できるようになるのは難しい

　【必要なもの】
・研修完了


ペアプロを取りいれて、知識の差がないようにしていく。
【11月16日_久保田】

【11月16日_横山】
・コードの品質担保
　→モブプロ
・チーム開発について
　→プロダクトバックログ画面と、カンバン画面をJustinmindを使って作成完了(11/19)
　　→こうきさんチェック
　　　→宮島さんチェク
　→スプリント計画(11/20)
　→実装(11/21)

【11月21日_郡山】
◯Backlog画面
・ストーリーの優先度不要。epicでつけれるなら便利だけど。
・add storyはダイアログ表示じゃなくて良い。nameじゃなくて、subjectの方が良い？
・add sprint、sprint period不要。期間はカレンダーで選択。
　コンセプト入力欄がない、リリース計画で使うっていったじゃん。

◯Kanban画面
・ストーリーのポイント表示。
・ストーリーの時間は(例)2/8hのように残り時間表示できたらいいなとのこと。％もあったらいいのかな〜？
・上記の続き。経過をバーンダウンで表示するには記録する必要がある。model追加。
・add task、textareaダサい。
・add status右に置くのスペース的に勿体無くない？

◯共通
・ヘッダーの構想が最大にツッコミ頂きました。最も便利な画面遷移を考えよ。情報は基本ツリー構造だから等々。ここでまとめきれません、内容が難解だったので、時間があれば全員で再度聴きたいです。すいません。

◯その他
・スプリント計画を立てて、動いていないことに驚く。なんのための研修なの？一人一人何してんの？
・何のためにjust in mind 使ってんの？画面遷移しなよ。
・基本機能部は上記修正しつつ、実装していってよとのこと。
・全員同じ作業してるのはない。分担せよ。

【1123】

・スプリントが終わった後にストーリーを自動で非表示になるのか、手動で非表示にするのか?
　必ずしも全てストーリーを表示させられるものではない。
　　→タスクが完了していないストーリーに関しては、自動で次のスプリントに移動するとかはいかがだろうか


・プロダクトバックログで完了したスプリントを表示/非表示させられる
・ストーリーはどうするもん？？
・スプリントの名前は変えるものか？変えられた方が良いのか
　→変える必要がなく通し番号で良いのであれば、addsprintは空がでてくるタイプがスマート
・addsprintはダイアログ表示で良いか
　→入力する項目がsubject、期間、ディスクリプションがあるため空がでてくる様式はダサい

・ヘッダーについて_方針確認
　→UIFlowsから階層構造がどうなっているか、ユーザーが見たいものは何かを考えながら作成する
　→一旦左のハンバーガーメニューで隠しておけ！さぁ実装
